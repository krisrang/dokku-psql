#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE  ]] && set -x

APP="$2"
PSQL_ROOT="$DOKKU_ROOT/.psqlkr"
PSQL_IMAGE="postgres:9.4"
PSQL_CONTAINER_NAME="dokku-psqlkr"
PSQL_PORT=5432
PSQL_HOST=postgres

# remove with dokku 0.3.18
verify_app_name() {
  local APP="$1"
  [[ ! -n "$APP" ]] && dokku_log_fail "(verify_app_name) APP must not be null"
  [[ ! -d "$DOKKU_ROOT/$APP" ]] && dokku_log_fail "App $APP does not exist"
  IMAGE="dokku/$APP"
  return 0
}

psql_check_already_exists() {
  [[ -d "$REDIS_ROOT" ]] && echo "Database for $APP already exists" && exit 1
}

psql_check_exists() {
  [[ ! -f "$PSQL_ROOT/db_$APP" ]] && echo "No database configured for $APP" && exit 1
}

psql_check_container() {
  [[ -z "$PSQL_ID" ]] && echo "Postgresql container not started. Start with dokku psql:start" && exit 1
}

psql_load_container_id() {
  PSQL_ID=$(docker ps -f status=running | grep "$PSQL_CONTAINER_NAME" | awk '{print $1}') || true
}

psql_database_name() {
  echo "$1" | tr .- _
}

psql_db_url() {
  local APP="$1"
  local DATABASE=$(cat "$PSQL_ROOT/db_$APP")
  local PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
  echo "postgresql://${DATABASE}:${PASSWORD}@${PSQL_HOST}:${PSQL_PORT}/${DATABASE}"
}

psql_env_for() {
  local APP="$1"
  if [[ -f "$PSQL_ROOT/db_$APP" ]] && [[ -f "$PSQL_ROOT/pass_$APP" ]]; then
    local URL=$(psql_db_url "$APP")
    local DATABASE=$(cat "$PSQL_ROOT/db_$APP")
    local PASSWORD=$(cat "$PSQL_ROOT/pass_$APP")
    echo "DATABASE_URL=$URL POSTGRESQL_URL=$URL DB_TYPE=postgresql DB_HOST=$PSQL_HOST DB_PORT=$PSQL_PORT DB_NAME=$DATABASE DB_USER=$DATABASE DB_PASS=$PASSWORD"
  fi
}

psql_set_env_for() {
  local APP="$1"
  dokku_log_info1 "Setting config vars for $APP"
  dokku config:set-norestart "$APP" $(psql_env_for "$APP") &> /dev/null
}

psql_unset_env_for() {
  local APP="$1"
  dokku_log_info1 "Unsetting config vars for $APP"
  dokku config:unset-norestart "$APP" DATABASE_URL POSTGRESQL_URL DB_TYPE DB_HOST DB_PORT DB_NAME DB_USER DB_PASS &> /dev/null
}

interactive_docker_exec() {
  local TTY_OPT=$([[ -t 0 ]] && echo "--tty")
  docker exec --interactive $TTY_OPT "$@"
}
